#version 330 core

out vec4 FragColor;

in VS_OUT{
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} fs_in;

uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform bool blinn_phong;
uniform bool normal_mapping_flag;

vec3 calc_normal() {
    vec3 normal;
    if (normal_mapping_flag) {
        normal = texture(normalMap, fs_in.TexCoords).rgb;
 
        // ѕереводим вектор нормали в диапазон [-1,1]
        normal = normalize(normal * 2.0 - 1.0);
    } else {
        normal = normalize(fs_in.Normal);
    }

    return normal;
}

vec3 calc_light_dir() {
    vec3 light_dir;

    if (normal_mapping_flag) {
        light_dir = normalize(fs_in.TangentLightPos - fs_in.TangentFragPos);
    } else {
        light_dir = normalize(lightPos - fs_in.FragPos);
    }

    return light_dir;
}

vec3 calc_view_dir() {
    vec3 view_dir;

    if (normal_mapping_flag) {
        view_dir = normalize(fs_in.TangentViewPos - fs_in.TangentFragPos);
    } else {
        view_dir = normalize(viewPos - fs_in.FragPos);
    }

    return view_dir;
}

float calc_spec(vec3 light_dir, vec3 view_dir, vec3 normal) {
    float spec;

    if (blinn_phong) {
        vec3 halfway_dir = normalize(light_dir + view_dir);
        spec = pow(max(dot(normal, halfway_dir), 0.0), 32.0);
    } else {
        vec3 reflect_dir = reflect(-light_dir, normal);
        spec = pow(max(dot(view_dir, reflect_dir), 0.0), 8.0);
    }

    return spec;
}


void main()
{
    vec3 normal = calc_normal();
    
    // получаем диффузный цвет
    vec3 color = texture(diffuseMap, fs_in.TexCoords).rgb;

    // фонова€ составл€юща€
    vec3 ambient = 0.1 * color;

    // диффузна€ составл€юща€
    vec3 light_dir = calc_light_dir();
    float diff = max(dot(light_dir, normal), 0.0);
    vec3 diffuse = diff * color;

    // отраженна€ составл€юща€
    vec3 view_dir = calc_view_dir();
    vec3 reflect_dir = reflect(-light_dir, normal);
    float spec = calc_spec(light_dir, view_dir, normal);
    vec3 specular = vec3(0.2) * spec; // подразумеваем €ркий белый 

    FragColor = vec4(ambient + diffuse + specular, 1.0);
}