#version 330 core

out vec4 FragColor;

in VS_OUT{
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} fs_in;

uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;

uniform vec3 lightPos;
uniform vec3 viewPos;

uniform bool blinn_phong_flag;
uniform bool normal_mapping_flag;
uniform bool paralax_flag;
uniform bool cook_torrance_flag;
uniform float height_scale;


float CookTorranceForSpec(vec3 normal, vec3 light_dir, vec3 view_dir, float roughness_val, float min_eps) {
    if (roughness_val <= 0.0) {
        return 0.0;
    }

    vec3 halfway_dir = normalize(view_dir + light_dir);
    
    // скал€рные произведени€ указанных величин:
    // N Ц нормаль в точке, V Ц вектор взгл€да,
    // L Ц положение источника света, H Ц нормализованна€ сумма векторов L и V
    float N_L = max(dot(normal, light_dir), 0.0);
    float N_V = max(dot(normal, view_dir), 0.0);
    float N_H = max(dot(normal, halfway_dir), 0.0);
    float V_H = max(dot(view_dir, halfway_dir), 0.0);

    N_H = max(N_H, min_eps);
    V_H = max(V_H, min_eps);
    
    // геометрическа€ составл€юща€, учитывающа€ самозатенение
    float G = min(1.0, 2 * N_H * min(N_V, N_L) / V_H);

    // компонент, учитывающий шероховатость поверхности
    float R = exp((pow(N_H, 2) - 1.0) / (pow(N_H, 2) * pow(roughness_val, 2))) /
              (4.0 * pow(N_H, 4) * pow(roughness_val, 2));
    
    // коэффициент ‘ренел€
    float F = 1.0 / (1.0 + N_V);

    return min(1.0, (F * G * R) / (N_V * N_L + min_eps));
}

vec2 ReliefParallaxMapping(vec2 texCoords, vec3 viewDir) { 
    // „асть 1. ѕо сути представл€ет собой глубинный паралакс
    const float minLayers = 2;
    const float maxLayers = 64;
    float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));  

    float layerDepth = 1.0 / numLayers;
    float currentLayerDepth = 0.0;

    vec2 parallax_shift = viewDir.xy / viewDir.z * height_scale; 
    vec2 deltaTexCoords = parallax_shift / numLayers;
  
    vec2  currentTexCoords = texCoords;
    float currentDepthMapValue = texture(depthMap, currentTexCoords).r;
      
    while(currentLayerDepth < currentDepthMapValue) {
        // сдвигаем текстурные координаты вдоль направлени€ вектора P
        currentTexCoords -= deltaTexCoords;

        // получаем значение глубины из карты глубины дл€ текущих текстурных координат
        currentDepthMapValue = texture(depthMap, currentTexCoords).r;  

        // получаем значение глубины следующего сло€
        currentLayerDepth += layerDepth;  
    }

    // „асть 2.  онкретно часть соответвующа€ Relief PM

    // уполовиниваем смещение текстурных координат и размер сло€ глубины
	deltaTexCoords *= 0.5;
	layerDepth *= 0.5;

    // сместимс€ в обратном направлении от точки, найденной в Steep PM
	currentTexCoords += deltaTexCoords;
	currentLayerDepth -= layerDepth;

	const int binSearchStepsNumber = 10;

	for (int i = 0; i < binSearchStepsNumber; ++i) {
		deltaTexCoords *= 0.5;
		layerDepth *= 0.5;

		if (texture(depthMap, currentTexCoords).r > currentLayerDepth) {
			currentTexCoords -= deltaTexCoords;
			currentLayerDepth += layerDepth;
		} else {
			currentTexCoords += deltaTexCoords;
			currentLayerDepth -= layerDepth;
		}
	}

	return currentTexCoords;
}

vec2 calc_tex_coords(vec3 view_dir) {
    if (paralax_flag) {
        vec2 tex_coords = ReliefParallaxMapping(fs_in.TexCoords,  view_dir);
        if(tex_coords.x > 1.0 || tex_coords.y > 1.0 || tex_coords.x < 0.0 || tex_coords.y < 0.0) {
            discard;
        }

        return tex_coords;
    } else {
        return fs_in.TexCoords;
    }
}

vec3 calc_normal(vec2 tex_coords) {
    vec3 normal;

    if (normal_mapping_flag) {
        normal = texture(normalMap, tex_coords).rgb;
        normal = normalize(normal * 2.0 - 1.0);
    } else {
        normal = normalize(fs_in.Normal);
    }

    return normal;
}

vec3 calc_light_dir() {
    vec3 light_dir;

    if (normal_mapping_flag) {
        light_dir = normalize(fs_in.TangentLightPos - fs_in.TangentFragPos);
    } else {
        light_dir = normalize(lightPos - fs_in.FragPos);
    }

    return light_dir;
}

vec3 calc_view_dir() {
    vec3 view_dir;

    if (normal_mapping_flag) {
        view_dir = normalize(fs_in.TangentViewPos - fs_in.TangentFragPos);
    } else {
        view_dir = normalize(viewPos - fs_in.FragPos);
    }

    return view_dir;
}

float calc_spec(vec3 light_dir, vec3 view_dir, vec3 normal) {
    float roughness_val = 0.5;
    float min_eps = 1.0e-7;
    float spec;

    if (cook_torrance_flag) {
        spec = CookTorranceForSpec(normal, light_dir, view_dir, roughness_val, min_eps);
    } else if (blinn_phong_flag) {
        vec3 halfway_dir = normalize(light_dir + view_dir);
        spec = pow(max(dot(normal, halfway_dir), 0.0), 32.0);
    } else {
        vec3 reflect_dir = reflect(-light_dir, normal);
        spec = pow(max(dot(view_dir, reflect_dir), 0.0), 8.0);
    }

    return spec;
}


void main()
{
    vec3 view_dir = calc_view_dir();
    vec2 tex_coords = calc_tex_coords(view_dir);
    vec3 normal = calc_normal(tex_coords);
    
    // получаем диффузный цвет
    vec3 color = texture(diffuseMap, tex_coords).rgb;

    // фонова€ составл€юща€
    vec3 ambient = 0.1 * color;

    // диффузна€ составл€юща€
    vec3 light_dir = calc_light_dir();
    float diff = max(dot(light_dir, normal), 0.0);
    vec3 diffuse = diff * color;

    // отраженна€ составл€юща€
    float specularStrength = 0.5f;
    vec3 reflect_dir = reflect(-light_dir, normal);
    float spec = calc_spec(light_dir, view_dir, normal);
    vec3 specular = specularStrength * diff * spec * vec3(1.0f);

    FragColor = vec4(ambient + diffuse + specular, 1.0);
}
